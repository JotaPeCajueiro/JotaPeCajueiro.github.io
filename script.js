// Espera o HTML carregar completamente antes de rodar o script
document.addEventListener('DOMContentLoaded', function() {

    // Seleciona todos os bot√µes dentro da navega√ß√£o <nav>
    const menuButtons = document.querySelectorAll('nav button');

    // Seleciona todas as se√ß√µes de conte√∫do dentro da div #content-area
    const contentSections = document.querySelectorAll('#content-area .content-section');

    // Seleciona a √°rea de conte√∫do principal
    const contentArea = document.getElementById('content-area');

    // Fun√ß√£o para mostrar o conte√∫do baseado no ID
    function showContent(contentId) {
        // Esconde todas as se√ß√µes primeiro
        contentSections.forEach(section => {
            // Remove a classe 'active' para garantir que a anima√ß√£o funcione novamente
            section.classList.remove('active');
            // Esconde a se√ß√£o (redundante se usar a classe 'active', mas seguro)
            section.style.display = 'none';
        });

        // Encontra a se√ß√£o espec√≠fica que deve ser mostrada
        const sectionToShow = document.getElementById(contentId);

        // Se a se√ß√£o existir...
        if (sectionToShow) {
             // Garante que a √°rea de conte√∫do est√° vis√≠vel (caso tenha sido escondida)
            contentArea.style.display = 'block';
            // Mostra a se√ß√£o desejada
            sectionToShow.style.display = 'block';
            // Adiciona a classe 'active' para ativar a anima√ß√£o CSS e confirmar visibilidade
            // Usar setTimeout garante que o display:block seja aplicado ANTES da classe ser add,
            // permitindo a anima√ß√£o ocorrer corretamente ap√≥s re-exibi√ß√£o.
            setTimeout(() => {
                sectionToShow.classList.add('active');
            }, 10); // Pequeno delay
        } else {
            // Se nenhuma se√ß√£o corresponder, esconde a √°rea de conte√∫do
            contentArea.style.display = 'none';
        }
    }

    // Adiciona um ouvinte de evento de clique para cada bot√£o do menu
    menuButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Pega o valor do atributo 'data-content-id' do bot√£o clicado
            const contentId = this.dataset.contentId;
            // Chama a fun√ß√£o para mostrar o conte√∫do correspondente
            showContent(contentId);
        });
    });

    // Opcional: Esconder a √°rea de conte√∫do inicialmente se nenhum item for selecionado
    // contentArea.style.display = 'none';
    // Ou mostrar a primeira se√ß√£o por padr√£o:
    // if (menuButtons.length > 0) {
    //     showContent(menuButtons[0].dataset.contentId);
    // } else {
         contentArea.style.display = 'none'; // Esconde se n√£o houver bot√µes
    // }
 // --- NOVO C√ìDIGO PARA O MODO NOTURNO ---
 const themeToggleButton = document.getElementById('theme-toggle-button');
 const body = document.body;
 const storageKey = 'camilaSiteTheme'; // Chave √∫nica para este site

 // Fun√ß√£o para aplicar o tema e atualizar o bot√£o
 function applyTheme(theme) {
     if (theme === 'dark') {
         body.classList.add('dark-mode');
         themeToggleButton.textContent = '‚òÄÔ∏è'; // √çcone de Sol
         themeToggleButton.setAttribute('aria-label', 'Ativar modo claro');
     } else {
         body.classList.remove('dark-mode');
         themeToggleButton.textContent = 'üåô'; // √çcone de Lua
         themeToggleButton.setAttribute('aria-label', 'Ativar modo escuro');
     }
 }

 // Verifica se h√° um tema salvo no localStorage ao carregar a p√°gina
 const savedTheme = localStorage.getItem(storageKey);

 if (savedTheme) {
     // Aplica o tema salvo
     applyTheme(savedTheme);
 } else {
      // Opcional: Poderia verificar a prefer√™ncia do sistema operacional aqui
      // Por simplicidade, vamos definir o modo escuro como padr√£o se nada for salvo
      applyTheme('dark');
 }


 // Adiciona o evento de clique ao bot√£o de tema
 themeToggleButton.addEventListener('click', () => {
     // Verifica qual ser√° o NOVO tema (o oposto do atual)
     let newTheme = body.classList.contains('dark-mode') ? 'light' : 'dark';

     // Aplica o novo tema visualmente e atualiza o bot√£o
     applyTheme(newTheme);

     // Salva a nova prefer√™ncia no localStorage
     localStorage.setItem(storageKey, newTheme);
 });
 // --- FIM DO C√ìDIGO PARA MODO NOTURNO ---
   // --- L√ìGICA DO QUIZ ---
   const quizForm = document.getElementById('camilaQuiz');
   const quizResultArea = document.getElementById('quizResult');
   const scoreMessage = document.getElementById('scoreMessage');
   const detailedFeedback = document.getElementById('detailedFeedback');

   // !! IMPORTANTE: Personalize as respostas corretas aqui !!
   const correctAnswers = {
       q1: 'a',
       q2: 'c',
       q3: 'b',
       q4: 'b'
   };

   // !! IMPORTANTE: Personalize as mensagens de feedback aqui !!
   const feedbackMessages = [
       { score: 0, message: "Hmm, parece que precisamos conversar mais sobre nossos momentos! üòâ Mas o importante √© o amor!", feedback: "N√£o desanime, o amor est√° no ar!" },
       { score: 1, message: "Voc√™ acertou uma! J√° √© um come√ßo brilhante como nosso amor! ‚ú®", feedback: "Continue tentando, cada acerto √© uma estrela a mais no nosso c√©u!" },
       { score: 2, message: "Duas certas! Estamos em sintonia, mas ainda h√° mist√©rios a desvendar! ‚ù§Ô∏è", feedback: "Estamos quase l√°, nosso la√ßo √© forte!" },
       { score: 3, message: "Uau, tr√™s acertos! üòç Isso merece um beijo!", feedback: "Voc√™ √© incr√≠vel, conhece os detalhes do nosso amor!" },
       { score: 4, message: "üéâVoc√™ acertou todas! Te amo demais!", feedback: "Nossa sintonia √© m√°gica, alma g√™mea detectada!" }
   ];

   if (quizForm) {
       quizForm.addEventListener('submit', function(event) {
           event.preventDefault();

           let score = 0;
           const formData = new FormData(quizForm);
           let allAnswered = true;
           let questionCount = 0;

           // PRIMEIRO: Limpar classes de feedback anteriores de TODAS as labels
           document.querySelectorAll('.quiz-question label').forEach(label => {
               label.classList.remove('correct-answer', 'wrong-answer');
           });

           for (const questionName in correctAnswers) { // ex: q1, q2, q3, q4
               questionCount++;
               const userAnswer = formData.get(questionName); // Pega o valor do radio selecionado para esta pergunta
               const correctAnswerValue = correctAnswers[questionName];

               if (!userAnswer) { // Se o usu√°rio n√£o respondeu (apesar do 'required')
                   allAnswered = false;
                   continue; // Pula para a pr√≥xima pergunta sem dar feedback visual para esta
               }

               // Encontra o input de r√°dio espec√≠fico que o usu√°rio selecionou para esta pergunta
               const selectedInputElement = quizForm.querySelector(`input[name="${questionName}"][value="${userAnswer}"]`);

               if (selectedInputElement) {
                   const selectedLabelElement = selectedInputElement.closest('label'); // Pega a label pai do input selecionado
                   if (selectedLabelElement) {
                       if (userAnswer === correctAnswerValue) {
                           selectedLabelElement.classList.add('correct-answer'); // Marca a selecionada como correta
                           score++;
                       } else {
                           selectedLabelElement.classList.add('wrong-answer'); // Marca a selecionada como errada
                           // N√ÉO marca mais a correta automaticamente
                       }
                   }
               }
           }

           if (!allAnswered && questionCount > 0) {
               alert("Por favor, responda a todas as perguntas antes de ver o resultado!");
               quizResultArea.style.display = 'none'; // Esconde o resultado se n√£o respondeu tudo
               return;
           }

           // Exibe a mensagem de resultado com base na pontua√ß√£o
           let resultText = `Voc√™ acertou ${score} de ${questionCount} perguntas!`;
           let feedbackText = "";

           if (questionCount === 0) {
               resultText = "O quiz ainda n√£o tem perguntas!";
               feedbackText = "Adicione algumas perguntas e respostas no c√≥digo. üòâ";
           } else {
               const finalFeedback = feedbackMessages.find(fb => fb.score === score);
               if (finalFeedback) {
                   resultText = finalFeedback.message;
                   feedbackText = finalFeedback.feedback;
               } else {
                   // Fallback se n√£o houver mensagem exata para a pontua√ß√£o
                   if (score === questionCount) { // Se acertou tudo
                       const bestFeedback = feedbackMessages[feedbackMessages.length -1] || {message: resultText, feedback: "Parab√©ns!"};
                       resultText = bestFeedback.message;
                       feedbackText = bestFeedback.feedback;
                   } else if (score === 0 && feedbackMessages.length > 0) { // Se errou tudo e tem mensagem para score 0
                       const zeroFeedback = feedbackMessages[0];
                       resultText = zeroFeedback.message;
                       feedbackText = zeroFeedback.feedback;
                   }
                   // Se n√£o, o resultText padr√£o (X de Y) e um feedback gen√©rico ser√£o usados
                    else if (!finalFeedback) {
                       feedbackText = "Continue tentando da pr√≥xima vez!";
                   }
               }
           }

           scoreMessage.textContent = resultText;
           detailedFeedback.textContent = feedbackText;
           quizResultArea.style.display = 'block';
       });
   }
});
