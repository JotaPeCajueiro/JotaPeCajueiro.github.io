// Espera o HTML carregar completamente antes de rodar o script
document.addEventListener('DOMContentLoaded', function() {

    // Seleciona todos os bot√µes dentro da navega√ß√£o <nav>
    const menuButtons = document.querySelectorAll('nav button');

    // Seleciona todas as se√ß√µes de conte√∫do dentro da div #content-area
    const contentSections = document.querySelectorAll('#content-area .content-section');

    // Seleciona a √°rea de conte√∫do principal
    const contentArea = document.getElementById('content-area');

    // Fun√ß√£o para mostrar o conte√∫do baseado no ID
    function showContent(contentId) {
        // Esconde todas as se√ß√µes primeiro
        contentSections.forEach(section => {
            // Remove a classe 'active' para garantir que a anima√ß√£o funcione novamente
            section.classList.remove('active');
            // Esconde a se√ß√£o (redundante se usar a classe 'active', mas seguro)
            section.style.display = 'none';
        });

        // Encontra a se√ß√£o espec√≠fica que deve ser mostrada
        const sectionToShow = document.getElementById(contentId);

        // Se a se√ß√£o existir...
        if (sectionToShow) {
             // Garante que a √°rea de conte√∫do est√° vis√≠vel (caso tenha sido escondida)
            contentArea.style.display = 'block';
            // Mostra a se√ß√£o desejada
            sectionToShow.style.display = 'block';
            // Adiciona a classe 'active' para ativar a anima√ß√£o CSS e confirmar visibilidade
            // Usar setTimeout garante que o display:block seja aplicado ANTES da classe ser add,
            // permitindo a anima√ß√£o ocorrer corretamente ap√≥s re-exibi√ß√£o.
            setTimeout(() => {
                sectionToShow.classList.add('active');
            }, 10); // Pequeno delay
        } else {
            // Se nenhuma se√ß√£o corresponder, esconde a √°rea de conte√∫do
            contentArea.style.display = 'none';
        }
    }

    // Adiciona um ouvinte de evento de clique para cada bot√£o do menu
    menuButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Pega o valor do atributo 'data-content-id' do bot√£o clicado
            const contentId = this.dataset.contentId;
            // Chama a fun√ß√£o para mostrar o conte√∫do correspondente
            showContent(contentId);
        });
    });

    // Opcional: Esconder a √°rea de conte√∫do inicialmente se nenhum item for selecionado
    // contentArea.style.display = 'none';
    // Ou mostrar a primeira se√ß√£o por padr√£o:
    // if (menuButtons.length > 0) {
    //     showContent(menuButtons[0].dataset.contentId);
    // } else {
         contentArea.style.display = 'none'; // Esconde se n√£o houver bot√µes
    // }
 // --- NOVO C√ìDIGO PARA O MODO NOTURNO ---
 const themeToggleButton = document.getElementById('theme-toggle-button');
 const body = document.body;
 const storageKey = 'camilaSiteTheme'; // Chave √∫nica para este site

 // Fun√ß√£o para aplicar o tema e atualizar o bot√£o
 function applyTheme(theme) {
     if (theme === 'dark') {
         body.classList.add('dark-mode');
         themeToggleButton.textContent = '‚òÄÔ∏è'; // √çcone de Sol
         themeToggleButton.setAttribute('aria-label', 'Ativar modo claro');
     } else {
         body.classList.remove('dark-mode');
         themeToggleButton.textContent = 'üåô'; // √çcone de Lua
         themeToggleButton.setAttribute('aria-label', 'Ativar modo escuro');
     }
 }

 // Verifica se h√° um tema salvo no localStorage ao carregar a p√°gina
 const savedTheme = localStorage.getItem(storageKey);

 if (savedTheme) {
     // Aplica o tema salvo
     applyTheme(savedTheme);
 } else {
      // Opcional: Poderia verificar a prefer√™ncia do sistema operacional aqui
      // Por simplicidade, vamos definir o modo escuro como padr√£o se nada for salvo
      applyTheme('dark');
 }


 // Adiciona o evento de clique ao bot√£o de tema
 themeToggleButton.addEventListener('click', () => {
     // Verifica qual ser√° o NOVO tema (o oposto do atual)
     let newTheme = body.classList.contains('dark-mode') ? 'light' : 'dark';

     // Aplica o novo tema visualmente e atualiza o bot√£o
     applyTheme(newTheme);

     // Salva a nova prefer√™ncia no localStorage
     localStorage.setItem(storageKey, newTheme);
 });
 // --- FIM DO C√ìDIGO PARA MODO NOTURNO ---
});
